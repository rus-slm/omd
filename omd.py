# Guido van Rossum <guido@python.org>

def step1():
    print(
        '–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –≤—ã–ø–∏—Ç—å –∑–∞–π—Ç–∏ –≤ –±–∞—Ä. '
        '–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è'
    )
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step2_umbrella()
    return step2_no_umbrella()


def step2_umbrella():
    print('–£—Ç–∫–∞ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç–∏–∫ –∏ –¥—É–º–∞–µ—Ç –∫—É–¥–∞ –±—ã –µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è. '
          '–£—Ç–∫–∞ —Ö–æ—á–µ—Ç –ª–∏–±–æ –Ω–∞ –ü–∞—Ç—Ä–∏–∫–∏, –ª–∏–±–æ –Ω–∞ –ß–∏—Å—Ç—ã–µ –ü—Ä—É–¥—ã.')
    print('–ö—É–¥–∞ –µ–π –ø–æ–π—Ç–∏?')
    option = ''
    options = {'–ü–∞—Ç—Ä–∏–∫–∏': True, '–ß–∏—Å—Ç—ã–µ': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()
    if options[option]:
        return step3_patriki()
    return step3_chystye()


def step2_no_umbrella():
    print('–ü–æ—à–µ–ª –¥–æ–∂–¥—å –∏ —É—Ç–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –¥–æ–º–∞ :(')
    print('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step1()
    else:
        print('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')


def step3_patriki():
    print('–£—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –Ω–∞ –ü–∞—Ç—Ä–∏–∞—Ä—à–∏–µ –ü—Ä—É–¥—ã, '
          '–∑–∞—à–ª–∞ –≤ –±–∞—Ä –∏ –¥—É–º–∞–µ—Ç —á—Ç–æ –≤—ã–ø–∏—Ç—å. '
          '–ß—Ç–æ –µ–π –≤—ã–ø–∏—Ç—å?')
    option = ''
    options = {'–í–∏–Ω–æ': True, '–ü–∏–≤–æ': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()
    return step4_patriki()


def step3_chystye():
    print('–£—Ç–∫–∞ –ø—Ä–∏—à–ª–∞ –≤ –±–∞—Ä –Ω–∞ –ß–∏—Å—Ç—ã—Ö –ü—Ä—É–¥–∞—Ö –∏ –¥—É–º–∞–µ—Ç, '
          '—á—Ç–æ –±—ã –µ–π –≤—ã–ø–∏—Ç—å. –ü–æ–º–æ–∂–µ—Ç–µ —Å –≤—ã–±–æ—Ä–æ–º?')
    option = ''
    options = {'–í–∏–Ω–æ': True, '–í–∏—Å–∫–∏-–∫–æ–ª–∞': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()
    return step4_chystye()


def step4_patriki():
    print('–£—Ç–∫–∞ –Ω–∞–ø–∏–ª–∞—Å—å –∏ –≤—ã—à–ª–∞ –≥—É–ª—è—Ç—å, '
          '–≥–¥–µ –µ—é –±–µ—Å—â–∞–¥–Ω–æ –æ—Ç–æ–±–µ–¥–∞–ª –∫–æ—Ç –ë–µ–≥–µ–º–æ—Ç.')
    print('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step1()
    else:
        print('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')


def step4_chystye():
    print('–£—Ç–∫–∞ —è–≤–Ω–æ –ø–µ—Ä–µ–±—Ä–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å –∫ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º, '
          '–∫–æ—Ç–æ—Ä—ã–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –ø–ª–∞–≤–∞–ª–∏ –≤ –ø—Ä—É–¥—É.'
          '\n–í–º–µ—Å—Ç–µ –æ–Ω–∏ –¥—É–º–∞—é—Ç, –∫—É–¥–∞ —É–ª–µ—Ç–µ—Ç—å –∏–∑ —ç—Ç–æ–π '
          '—Å–µ—Ä–æ–π –∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç–Ω–æ–π –∏–º –ú–æ—Å–∫–≤—ã. '
          '–ö—É–¥–∞ –∏–º —É–ª–µ—Ç–µ—Ç—å?')
    option = ''
    options = {'–ï–≥–∏–ø–µ—Ç': 1, '–¢—É–Ω–∏—Å': 2, '–ö—Ä—ã–º': 3}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}/{}'.format(*options))
        option = input()
    answer = ['–û—Ç–ª–∏—á–Ω–æ, —É—Ç–∫–∞ –∏ –µ–µ –¥—Ä—É–∑—å—è —É–ª–µ—Ç–µ–ª–∏ –≤ ', option, '!']
    print(''.join(answer))
    print('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
    print('AVIASALES –ø–æ–º–æ–∂–µ—Ç –∫–∞–∂–¥–æ–π —É—Ç–∫–µ —É–ª–µ—Ç–µ—Ç—å –≤ —Ç–µ–ø–ª—ã–µ –∫—Ä–∞—è. '
          'AVIASALES - –ø–æ–∏—Å–∫ –¥–µ—à–µ–≤—ã—Ö –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.')
    print('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')
    option1 = ''
    options1 = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option1 not in options1:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options1))
        option1 = input()

    if options1[option1]:
        return step1()
    else:
        print('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')


if __name__ == '__main__':
    step1()
